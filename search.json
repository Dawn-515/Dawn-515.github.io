[{"title":"windows","path":"/2024/06/24/windows/","content":"windows1免密自动登录1.1 使用微软账户登录win+r 运行 netplwiz取消勾选 “要使用本计算机，用户必须输入用户名密码”然后两遍输入微软账户的密码，无需修改用户名 1.2 使用本地账户登录2 windows开启SSH服务端服务端windows打开设置，依次选择应用，应用和功能，可选功能，添加功能，搜索ssh,然后安装OpenSSH服务器。 安装完成后，以管理员身份启动cmd或powershell，输入 1net start sshd 接下来就可以通过另一台客户端电脑连接服务端windows了，但是默认是连接到服务端的cmd， 以管理员身份启动powshell，输入以下代码可以使SSH连接Windows时默认使用Powershell 1New-ItemProperty -Path &quot;HKLM:\\SOFTWARE\\OpenSSH&quot; -Name DefaultShell -Value &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot; -PropertyType String -Force 3 windwos服务常用端口 服务 协议 端口 FTP TCP 21 SSH(包括ssh和sftp) TCP 22 telnet TCP 23 SMTP TCP 25 http TCP 80 P0P3 TCP 110 https TCP 443 smb TCP 445 mysql TCP 3306 远程桌面连接 TCP 3389 DNS UDP 53 DHCP UDP 68 TFTP(简单文件传输系统) UDP 69 SNMP UDP 161 NFS(网络文件系统) UDP 2049 一般情况下，为了安全起见，运行商会封禁以下端口 80(http) 443(https) 445(samba) 25(SMTP) 465(SMTPS) 4 公网smb1 ipv6 + ddns-go + 开放netlogon2 ipv4 + ddns-go + 端口转发2.1方法1 在服务端与客户端分别进行端口转发（失败）服务端(家里台式机)， 1netsh interface portproxy add v4tov4 listenport=希望被修改成的服务器端口 listenaddress=0.0.0.0 connectport=445 connectaddress=127.0.0.1 比如,将smb默认的127.0.0.1:445端口转发给127.0.0.1:4455端口 1netsh interface portproxy add v4tov4 listenport=4455 listenaddress=127.0.0.1 connectport=445 connectaddress=127.0.0.1 客户端(学校笔记本) 1netsh interface portproxy add v4tov4 listenport=445 listenaddress=127.0.0.1 connectport=服务器端口 connectaddress=服务器IP 比如，将180.108.102.103:4455转发给127.0.0.2:445 1netsh interface portproxy add v4tov4 listenport=445 listenaddress=127.0.0.2 connectport=4455 connectaddress=ipv6.chenxiaoijiajia.top 查看全部端口转发： 1netsh interface portproxy show all 删除端口转发： 1netsh interface portproxy delete v4tov4 listenaddress=欲删除项目的监听IP listenport=欲删除项目的监听端口 比如 删除 127.0.0.2:445 1netsh interface portproxy delete v4tov4 listenaddress=127.0.0.2 listenport=445 方法2 路由器设置端口转发（成功）5 字体windows terminal 工具 字体 字号 行高 第二字体 windows terminal MesloLGSDZ Nerd Font Mono 14 tabby MesloLGSDZ Nerd Font Mono 18 2 微软雅黑 idea 编辑器字体即配色方案字体 MiSans 20 1.2 Microsoft YaHei idea 编辑器字体即配色方案字体 方案2 UbuntuMono Nerd Font Mono 20 1.2 Microsoft YaHei ideaUI Microsoft YaHei 16 idea 控制台 MesloLGSDZ Nerd Font Mono 18 1.2 术语在下载某些字体时，可能会遇到相关术语，如下： mono 即 Monospaced，等宽字体（一般指英文等宽） Proportional 比例字体 Serif 衬线体在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。毛边 sans 即 Sans-Serif，无衬线体没有这些额外的装饰，而且笔画的粗细差不多。 gothic 哥特体，即无衬线体 上述术语都是针对英文字体的 对于中文梯子 hinted 显示效果微调的字体 unhinted 无微调字体 VF (Variable fonts) :可变字体，可以自由的调整字体的粗细 slab 一般较为厚重，适用于强调性文本，标题等，不适用于长文本 微调(hinting)分为两种：内嵌微调与自动微调。内嵌微调是字体设计者耗费大量的时间和精力、精心制作的、内嵌在字体文件中的额外指令，本质上是人工微调；而自动微调(autohint)是 FreeType 内嵌的一套微调算法，通用于所有矢量字体，本质上是机器微调。一般说来，内嵌微调比自动微调的显示效果更佳。 上述术语都是针对英文字体的，对于中文字体，习惯性称衬线字体为宋体，非衬线字体为黑体 字重（字体大小） Thin 极细 Light 细体 Regular 常规 Medium 适中 Blod 粗体 Black 粗体 Heavy 特粗 italic 斜体 bolditalic 加粗斜体 regular 常规体 sc 即 Simplified Chinese，简体中文 tc 即 Traditional Chinese，繁体中文 cl 即 Classical Literature，《康熙字典》字形 ligature 连体字符，举例来说，会把 != 变成 ≠ 字体文件类型后缀： .otf 是指基于 PostScript 开发的 OTF 格式 （windows 对其支持不佳，例如：word 无法将这类字体嵌入到 pdf 中） .ttf包含两类字体： 一类是古老的 TTF 格式； 另一类是 基于 TTF 开发的 OTF 格式.ttc (TrueType Collection) 是 ttf (TrueType Collection) 的集合。 https://blog.csdn.net/weixin_39550940/article/details/111739766 Sarasa Gothic &#x2F; 更纱黑体：基于Noto Sans，全宽引号 Quotes (“”) are full width —— Gothic Sarasa UI &#x2F; 更纱黑体 UI：基于Noto Sans窄引号 Quotes (“”) are narrow —— UI Sarasa Mono T &#x2F; 等距更纱黑体 T：基于Iosevka，有连字，全宽破折号 Have ligature, Em dashes (——) are full width —— MonoT Sarasa Mono &#x2F; 等距更纱黑体：基于Iosevka，有连字，半宽破折号 Have ligature, Em dashes (——) are half width —— Mono Sarasa Term：基于Iosevka，无连字，半宽破折号 No ligature, Em dashes (——) are half width —— Term 适合代码 的 mono sans Nerd fonts unhinted 中英文2:1的字体 1 Dejavu Sans Mono 2 Sarasa mono SC(等距更纱黑体) Sarasa Term SC Nerd Sarasa Mono SC Nerd 旧版 Sarasa Mono SC Nerd &amp; Sarasa Mono SC Wide Nerd 新版 3 思源黑体HW ​ https://zhuanlan.zhihu.com/p/623573927 6 vscodevscode 远程运行R 远程服务器 1 R环境 和R包 12install.packages(&quot;languageserver&quot;)install.packages(&quot;httpgd&quot;) 2 python环境 和radianpipx install radian 本地电脑 1 vscode remote-SSH插件 7 winget查询参数 winget install -q winget install –id packageid –scope machine 123456789101112131415161718192021222324252627282930313233343536373839404142winget install --id packageid --scope machine# --scope machine ==&gt; C:\\Program Files\\WinGet\\Packages#### zip格式 ###### --scope machine 全局安装 ## ## 用户安装## C:\\Users\\24970\\AppData\\Local\\Microsoft\\WinGet\\Packages\\sharkdp.fd_Microsoft.Winget.Source_8wekyb3d8bbwe\\fd-v8.7.1-x86_64-pc-windows-msvc# batwinget install --id sharkdp.bat --scope machine# fd-findwinget install sharkdp.fdwinget install --id sharkdp.fd --scope machine# hexyl 16进制查看器winget install --id sharkdp.hexyl --scope machine# dustwinget install --id bootandy.dust --scope machine# dufwinget install --id muesli.duf --scope machine# zoxidewinget install --id ajeetdsouza.zoxide --scope machine# fzfwinget install --id junegunn.fzf --scope machine#### msi格式 ##### bottom 默认安装在 C:\\Program Files\\bottomwinget install --id Clement.bottombtm#### exe格式 ####winget install wingetui### 失败# procs 尚未进winget源# lsd 只能用choco 8 出现ms-gamingoverlay问题1 实测 只需修改1HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameDVR 找到其中AppCaptureEnabled这个键值，把值改为0。 2HKEY_CURRENT_USER\\System\\GameConfigStore 找打其中GameDVR_Enabled这个键值，把值改为0 9 系统文件夹与用户文件夹1 启动文件夹1.1 系统启动文件夹123shell:CommonStartup%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\StartupC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 1.2 用户启动文件夹123shell:startup%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\StartupC:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 2 powershell 配置文件2.1当前用户，当前主机(用得较多)1234$PROFILE$PROFILE.CurrentUserCurrentHost$HOME\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1C:\\Users\\用户名\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 2.2 当前用户，所有主机12$PROFILE.CurrentUserAllHosts$HOME\\Documents\\PowerShell\\Profile.ps1 2.3 所有用户，当前主机12$PROFILE.AllUsersCurrentHost$PSHOME\\Microsoft.PowerShell_profile.ps1 2.2 所有用户，所有主机12$PROFILE.AllUsersAllHosts$PSHOME\\Profile.ps1"},{"title":"在 GitHub Pages 上部署 Hexo","path":"/2024/06/24/hexo-tutorial-deploy-githubpages-beginner/","content":"在 GitHub Pages 上部署 Hexo1 前言1.1 github pageGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。 1.2 hexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 1.3 总结使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定（网络问题除外）。本文就将详细介绍 在windows 11系统下使用 Hexo + GitHub 搭建免费个人博客网站的过程。 2 创建github仓库打开 github 页面，点击右上角 + 号，再点击 New repository，在Repository name 中输入 用户名.github.io，最后点击 Create repository 即可。 3 本地部署hexo本步骤主要参考 官方文档。 3.1 首先使用npm安装 hexo-cli12npm install -g hexo-clihexo -version 3.2 然后进入代码目录初始化项目1234cd E:\\workplace\\githubhexo init hexo-blogcd hexo-blognpm install 其中，hexo init [folder] 包括两个步骤: 1 git clone hexo-starter; 2 将 hexo-theme-landscape 主题移动到指定目录。至此，最基础的本地部署已经完成，可以在本地进行预览： 12hexo g # 生成静态文件hexo s # 启动本地服务器，打开网页即可预览 3.3 设置个性化主题3.3.1 solitude首先下载主题文件到 themes 文件夹内，并安装依赖； 1234cd E:\\workplace\\github\\hexo-bloggit clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitudecd themes/solitudenpm install hexo-renderer-pug hexo-renderer-stylus --save 然后修改 hexo 根目录中的_config.yml，把主题改为 solitude，将语言修改为中文。 12theme: solitude # 指定主题language: zh-CN # 指定语言 将 solitude 中的配置文件 _config.yml 复制到 hexo 根目录，并改名为 _config.solitude.yml 12cd E:\\workplace\\github\\hexo-blogcopy themes\\solitude\\_config.yml _config.solitude.yml 注意三个配置文件的优先级 _config.yml中的theme config &gt; _config.my-theme.yml &gt; themes/my-theme/_config.ymlhexo 根目录中 _config.solitude.yml 的配置是高优先级，因此，渲染时会优先采用此文件的配置项内容。在更新主题时可能会存在配置变更，请注意更新说明，可能需要手动对 _config.solitude.yml 同步修改。想查看覆盖配置有没有生效，可以通过 hexo g --debug 查看命令行输出。 最后重新启动 1hexo s 3.3.2 fluid首先下载主题文件到 themes 文件夹内, 12cd E:\\workplace\\github\\hexo-bloggit clone -b master git@github.com:fluid-dev/hexo-theme-fluid.git themes/fluid 然后修改 hexo 根目录中的_config.yml，把主题改为 fluid，将语言修改为中文。 12theme: fluid # 指定主题language: zh-CN # 指定语言 12cd E:\\workplace\\github\\hexo-blogcopy themes\\fluid\\_config.yml _config.fluid.yml 4 上传到GitHub首先安装依赖， 1npm install hexo-deployer-git --save 然后修改 _config.yml 1234deploy: type: git repo: git@github.com:Dawn-515/Dawn-515.github.io.git branch: main 可以同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 1234567deploy:- type: git repo: git@github.com:Dawn-515/Dawn-515.github.io.git branch: main- type: git repo: git@gitee.com:mulin_cx/mulin_cx.gitee.io.git branch: master 最后执行推送 hexo c &amp;&amp; hexo d。 12hexo c # 清除缓存文件 (db.json) 和已生成的静态文件 (public)。hexo d # 部署网站 当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。 浏览个人网站 用户名.github.io。"},{"title":"Hello World","path":"/2024/06/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]